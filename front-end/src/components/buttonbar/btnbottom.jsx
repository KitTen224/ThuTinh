import { useLocation } from "react-router-dom";
import { useState } from "react";
import "../style/buttonstyle.css";
import CommentList from "../postcard-attitues/commentList";

export default function ButtonBottom() {
  const location = useLocation();
  const path = location.pathname;
  const timelineTypes = ["/timeline/normal", "/timeline/anonymous"];
  const writeTypes = ["/write/normal","/write/anonymous"];

  const [showFeelings, setShowFeelings] = useState(false);

    const feelingOptions = [
      { emoji: "üß°", label: "√îm b·∫°n" },
      { emoji: "üå±", label: "C·∫£m ∆°n" },
      { emoji: "üíß", label: "ƒê·ªìng c·∫£m" },
      { emoji: "üå∏", label: "Hi·ªÉu b·∫°n" },
      { emoji: "üå§Ô∏è", label: "Mong b·∫°n ·ªïn" },
      { emoji: "üí≠", label: "Suy ng·∫´m" },
    ]
  //ch·ª©c nƒÉng onclick
  function handFelling() {
    setShowFeelings(prev => !prev);
    setShowInvisibleLetter(false);
    setShowComment(false);
  }

  const [showInvisibleLetter, setShowInvisibleLetter] = useState(false);
  const [letterText, setLetterText] = useState("");
  function handMess() {
    setShowInvisibleLetter(prev => !prev);
    setShowFeelings(false);
    setShowComment(false);
  }

  const [showComment, setShowComment] = useState(false);
  const [commentText, setCommentText] = useState("");
  const sampleComments = [
    {
      author: "N·∫∑c danh",
      content: "T·ªõ ƒë·ªìng c·∫£m l·∫Øm...",
      replies: [
        { author: "B·∫°n ƒë·ªçc", content: "C·∫≠u kh√¥ng m·ªôt m√¨nh ƒë√¢u." },
        { author: "·∫®n danh", content: "G·ª≠i b·∫°n m·ªôt chi·∫øc l√° üçÉ" }
      ]
    },
    {
      author: "M√®o N√¢u",
      content: "G·ª≠i b·∫°n m·ªôt √¥m d·ªãu d√†ng.",
      replies: []
    },
    {
      author: "·∫®n danh",
      content: "Ch√∫ng ta r·ªìi s·∫Ω ·ªïn.",
      replies: [
        { author: "Ng∆∞·ªùi l·∫°", content: "T·ªõ c≈©ng ƒëang mong ƒëi·ªÅu ƒë√≥." }
      ]
    },
    {
      author: "Ng∆∞·ªùi l·∫°",
      content: "D√π kh√¥ng n√≥i g√¨, t·ªõ v·∫´n ·ªü ƒë√¢y.",
      replies: []
    }
  ];

  function handComment() {
    setShowComment(prev => !prev);
    setShowInvisibleLetter(false);
    setShowFeelings(false);
  }

  function handImage() {
    
  }

  function handVideo() {
    
  }

  function handMusic() {
    
  }

  function handPost() {
    
  }
  function handWrite(){
    
  }

  // X√°c ƒë·ªãnh n√∫t hi·ªÉn th·ªã d·ª±a tr√™n ƒë∆∞·ªùng d·∫´n
  let buttons = [];

  if (timelineTypes.includes(path)) {
    buttons = [
      {label:"Th·∫£ c·∫£m x√∫c",onClick:handFelling},
      {label: "G·ª≠i th∆∞ v√¥ h√¨nh",onClick:handMess},
      {label: "Th·∫£o lu·∫≠n",onClick:handComment}
    ];
  }else if (path === "/timeline/diary") {
    buttons = [{label:"Vi·∫øt",onClick:handWrite}];
  }else if (writeTypes.includes(path)) {
    buttons = [
      {label:"·∫¢nh",onClick:handImage},
      {label: "Video",onClick:handVideo},
      {label:"Nh·∫°c",onClick:handMusic},
      {label:"G·ª≠i",onClick:handPost}
    ];
  }else if(path === "/write/diary") {
    buttons = [{label:"G·ª≠i",onClick:handPost}]
  }else{
    buttons = []; // fallback n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
  }

  return (
    <div className="post-footer">
      <div className="button-row">
        {buttons.map((btn, index) => (
          <button key={index} onClick={btn.onClick}>
            {btn.label}
          </button>
        ))}
      </div>

      {showFeelings && (
        <div className="feeling-span-box">
          {feelingOptions.map((item, index) => (
            <span
              key={index}
              className="feeling-span"
              title={item.label}
              onClick={() => {
                console.log("B·∫°n ƒë√£ th·∫£ c·∫£m x√∫c:", item.label);
                setShowFeelings(false);
              }}
            >
              {item.emoji}
            </span>
          ))}
        </div>
      )}

      {showInvisibleLetter && (
        <div className="input-box">
          <div className="input-wrapper">
            <textarea
              placeholder="G·ª≠i ƒëi·ªÅu g√¨ ƒë√≥ nh·∫π nh√†ng..."
              value={letterText}
              onChange={(e) => setLetterText(e.target.value)}
              className="text-textarea"
            />
            <span
              className="send-icon"
              title="G·ª≠i th∆∞"
              onClick={() => {
                console.log("Th∆∞ v√¥ h√¨nh:", letterText);
                setLetterText("");
                setShowInvisibleLetter(false);
              }}
            >
              üì©
            </span>
          </div>
        </div>
      )}

      {showComment && (
        <div className="input-box">
          <CommentList comments={sampleComments}/>
          <div className="input-wrapper">
            <textarea
              placeholder="Th·∫£o lu·∫≠n g√¨ ƒë√≥ th·∫≠t vui v·∫ª..."
              value={commentText}
              onChange={(e)=>setCommentText(e.target.value)}
              className="text-textarea"/>
              <span 
                className="send-icon"
                title="B√¨nh lu·∫≠n"
                onClick={()=>{
                  setCommentText("");
                  setShowComment(false);
                }}>
                üçÉ
              </span>
          </div>
        </div>
      )}
    </div>


  )

}
